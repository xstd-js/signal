import { EQUAL_FUNCTION_STRICT_EQUAL, EqualFunction, UndoFunction } from '@lirx/utils';
import { EventDispatcher } from '../../../../../event-emitter/single/event-dispatcher.js';
import { SignalError } from '../../../signal-error/signal-error.js';
import { areSignalValueOrErrorDifferent } from '../../../signal-value-or-error/are-signal-value-or-error-different.js';
import type { SignalValueOrError } from '../../../signal-value-or-error/signal-value-or-error.js';
import { SignalWatcher } from '../../../watchers/signal-watcher/signal-watcher.js';
import type { SignalTrait } from '../../core/signal/traits/signal.trait.js';
import type { SignalOptions } from '../../core/signal/traits/types/signal-options.js';
import type { TransientActivity } from '../../core/transient/traits/types/transient-activity.js';
import type { TransientSnapshotChanged } from '../../core/transient/traits/types/transient-snapshot-changed.js';
import { Transient } from '../../core/transient/transient.js';
import { WritableSignal } from '../../core/writable-signal/writable-signal.js';
import { SignalLinkedError } from './errors/signal-linked-error.js';
import { SignalLockedError } from './errors/signal-locked-error.js';
import type { LinkableSignalTrait } from './traits/linkable-signal.trait.js';
import type { LinkableSignalLinkOptions } from './traits/methods/linkable-signal.link.trait.js';

// https://github.com/angular/angular/pull/58189/files#diff-16f850f5f33730f7b3574e2137ab8750f5f90be010f6d2899b7b7de0a4d11648

export class LinkableSignal<GValue> extends Transient implements LinkableSignalTrait<GValue> {
  static unset<GValue>(options?: SignalOptions<GValue>): LinkableSignal<GValue> {
    return new LinkableSignal<GValue>(SignalError.UNSET, options);
  }

  static thrown<GValue>(error: unknown, options?: SignalOptions<GValue>): LinkableSignal<GValue> {
    return new LinkableSignal<GValue>(new SignalError(error), options);
  }

  #value: SignalValueOrError<GValue>;
  readonly #equal: EqualFunction<GValue>;

  readonly #tracker: EventDispatcher<void>;

  #linkedWith: SignalTrait<GValue> | undefined;
  #locked: boolean;

  #snapshotChanged: TransientSnapshotChanged | undefined;
  #untrackActivity: UndoFunction | undefined;
  #activityScheduled: boolean;

  constructor(
    initialValue: SignalValueOrError<GValue>,
    { equal = EQUAL_FUNCTION_STRICT_EQUAL }: SignalOptions<GValue> = {},
  ) {
    super();
    this.#value = initialValue;
    this.#equal = equal;
    this.#tracker = new EventDispatcher<void>();
    this.#locked = false;
  }

  #isDifferentValue(value: SignalValueOrError<GValue>): boolean {
    return areSignalValueOrErrorDifferent<GValue>(value, this.#value, this.#equal);
  }

  #set(value: SignalValueOrError<GValue>): boolean {
    const changed: boolean = this.#isDifferentValue(value);
    this.#value = value;
    return changed;
  }

  override takeSnapshot(): TransientSnapshotChanged {
    this.#updateValue();
    const value: SignalValueOrError<GValue> = this.#value;
    return (): boolean => {
      this.#updateValue();
      return this.#isDifferentValue(value);
    };
  }

  override trackActivity(onActivity: TransientActivity): UndoFunction {
    return this.#tracker.emitter.listen(onActivity);
  }

  get(): GValue {
    // TODO
    if (this.#linkedWith !== undefined) {
      Transient.runOutsideContext((): void => {
        super.set(this.#linkedWith!.get());
      });
    }

    super.capture();
    this.#updateValue();
    if (this.#value instanceof SignalError) {
      throw this.#value.error;
    }
    return this.#value;
  }

  set(value: SignalValueOrError<GValue>): void {
    this.#throwIfLinked();
    super.set(value);
  }

  #throwIfLinked(): void {
    if (this.linked) {
      throw new SignalLinkedError();
    }
  }

  #throwIfLocked(): void {
    if (this.locked) {
      throw new SignalLockedError();
    }
  }

  get linked(): boolean {
    return this.#linkedWith !== undefined;
  }

  get locked(): boolean {
    return this.#locked;
  }

  link(
    signal: SignalTrait<GValue>,
    { lock = false }: LinkableSignalLinkOptions = {},
  ): UndoFunction {
    this.#throwIfLinked();

    this.#linkedWith = signal;
    this.#locked = lock;

    this.#untrackActivity = this.#linkedWith.trackActivity((): void => {});

    const watcher: SignalWatcher<GValue> = new SignalWatcher<GValue>(
      signal,
      (value: SignalValueOrError<GValue>): void => {
        super.set(value);
      },
    );

    let active: boolean = true;

    return (this.#unlink = (): void => {
      if (active) {
        active = false;
        watcher.destroy();
        this.#linkedWith = undefined;
        this.#unlink = undefined;
        this.#locked = false;
      }
    });
  }

  #unlink(): void {}

  unlink(): void {
    this.#throwIfLocked();
    // this.#unlink?.();
  }

  [Symbol.dispose](): void {
    this.#unlink();
  }
}
